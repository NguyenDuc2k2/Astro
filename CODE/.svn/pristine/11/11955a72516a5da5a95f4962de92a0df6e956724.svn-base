package com.globits.hivhis.rest;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.globits.hivhis.dto.SearchDto;
import com.globits.hivhis.dto.WebsiteDto;
import com.globits.hivhis.service.WebsiteService;

@RestController
@RequestMapping("/api/cms/website")
public class RestWebsiteController {
	@Autowired
	private WebsiteService websiteService;

	@RequestMapping(value="/{id}", method = RequestMethod.PUT)
	public ResponseEntity<WebsiteDto> update(@RequestBody WebsiteDto dto, @PathVariable("id")UUID uuid) {
		WebsiteDto result = this.websiteService.saveOrUpdate(dto, uuid);
		return new ResponseEntity<WebsiteDto>(result, (result != null) ? HttpStatus.OK : HttpStatus.BAD_REQUEST);
	}
	
	@RequestMapping(value="", method = RequestMethod.POST)
	public ResponseEntity<WebsiteDto> create(@RequestBody WebsiteDto dto) {
		WebsiteDto result = this.websiteService.saveOrUpdate(dto, null);
		return new ResponseEntity<WebsiteDto>(result, (result != null) ? HttpStatus.OK : HttpStatus.BAD_REQUEST);
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public ResponseEntity<WebsiteDto> getAssetSource(@PathVariable("id") UUID id) {
		WebsiteDto dto = websiteService.getOne(id);
		return new ResponseEntity<WebsiteDto>(dto, HttpStatus.OK);
	}
	
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public void deleteCheckById(@PathVariable("id") UUID id) {
		websiteService.delete(id);
	}
	

	@RequestMapping(value="/searchByPage", method = RequestMethod.POST)
	public ResponseEntity<Page<WebsiteDto>> searchByPage(@RequestBody SearchDto searchDto) {
		Page<WebsiteDto> page =  this.websiteService.searchByPage(searchDto);
		return new ResponseEntity<Page<WebsiteDto>>(page, HttpStatus.OK);
	}
	

	@RequestMapping(value = "/checkDomain",method = RequestMethod.GET)
	public ResponseEntity<Boolean> checkDuplicateCode(@RequestParam(value = "id", required=false) UUID id, @RequestParam("domain") String domain) {
		Boolean result = websiteService.checkDuplicateDomain(id, domain);
		return new ResponseEntity<Boolean>(result, (result != null) ? HttpStatus.OK : HttpStatus.BAD_REQUEST);
	}
}
